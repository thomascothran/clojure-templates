(ns {{top/ns}}.server
 (:require [reitit.ring :as ring]
           [reitit.coercion.malli]
           [reitit.openapi :as openapi]
           [reitit.ring.malli]
           [reitit.swagger :as swagger]
           [reitit.swagger-ui :as swagger-ui]
           [reitit.ring.coercion :as coercion]
           [reitit.dev.pretty :as pretty]
           [reitit.ring.middleware.muuntaja :as muuntaja]
           [reitit.ring.middleware.exception :as exception]
           [reitit.ring.middleware.multipart :as multipart]
           [reitit.ring.middleware.parameters :as parameters]
    ;      [reitit.ring.middleware.dev :as dev]
           [reitit.ring.spec :as spec]
    ;      [spec-tools.spell :as spell]
           [ring.adapter.jetty :as jetty]
           [muuntaja.core :as m]
           [clojure.java.io :as io]
           [com.stuartsierra.component :as c]]
           [malli.util :as mu]))

(defn make-handler
  [_] ;; add app routes here
  (ring/ring-handler
    (ring/router
      [["/assets/*" (ring/create-resource-handler)]
       ["/swagger.json"
        {:get {:no-doc true
               :swagger {:info {:title "my-api"
                                :description "swagger docs with [malli](https://github.com/metosin/malli) and reitit-ring"
                                :version "0.0.1"}
                         ;; used in /secure APIs below
                         :securityDefinitions {"auth" {:type :apiKey
                                                       :in :header
                                                       :name "Example-Api-Key"}}
                         :tags [{:name "files", :description "file api"}
                                {:name "math", :description "math api"}]}
               :handler (swagger/create-swagger-handler)}}]
       ["/openapi.json"
        {:get {:no-doc true
               :openapi {:info {:title "my-api"
                                :description "openapi3 docs with [malli](https://github.com/metosin/malli) and reitit-ring"
                                :version "0.0.1"}
                         ;; used in /secure APIs below
                         :components {:securitySchemes {"auth" {:type :apiKey
                                                                :in :header
                                                                :name "Example-Api-Key"}}}}
               :handler (openapi/create-openapi-handler)}}] ]

      {;;:reitit.middleware/transform dev/print-request-diffs ;; pretty diffs
       :validate spec/validate ;; enable spec validation for route data
       ;;:reitit.spec/wrap spell/closed ;; strict top-level validation
       :exception pretty/exception
       :data {:coercion (reitit.coercion.malli/create
                          {;; set of keys to include in error messages
                           :error-keys #{#_:type :coercion :in :schema :value :errors :humanized #_:transformed}
                           ;; schema identity function (default: close all map schemas)
                           :compile mu/closed-schema
                           ;; strip-extra-keys (affects only predefined transformers)
                           :strip-extra-keys true
                           ;; add/set default values
                           :default-values true
                           ;; malli options
                           :options nil})
              :muuntaja m/instance
              :middleware [;; swagger & openapi
                           swagger/swagger-feature
                           openapi/openapi-feature
                           ;; query-params & form-params
                           parameters/parameters-middleware
                           ;; content-negotiation
                           muuntaja/format-negotiate-middleware
                           ;; encoding response body
                           muuntaja/format-response-middleware
                           ;; exception handling
                           exception/exception-middleware
                           ;; decoding request body
                           muuntaja/format-request-middleware
                           ;; coercing response bodys
                           coercion/coerce-response-middleware
                           ;; coercing request parameters
                           coercion/coerce-request-middleware
                           ;; multipart
                           multipart/multipart-middleware]}})
    (ring/routes
      (swagger-ui/create-swagger-ui-handler
        {:path "/"
         :config {:validatorUrl nil
                  :urls [{:name "swagger", :url "swagger.json"}
                         {:name "openapi", :url "openapi.json"}]
                  :urls.primaryName "openapi"
                  :operationsSorter "alpha"}})
      (ring/create-default-handler))))

(defn start [{:keys [hot-reload port]
              :or   {port 3333}
              :as c}] 
  (let [prod-router (make-handler c)
        handler (fn [req]
                   (if hot-reload
                     ((make-handler c) req)
                     (prod-router req)))]
    (println "starting server running in port " port)
    (jetty/run-jetty handler
                     {:port port, :join? false})))

(comment
  (start))

(defrecord Component [port hot-reload]
  c/Lifecycle
  (start [c]
    {:port port
     :server (start c)})
  (stop [c]
    (some-> (get c :server) (.close))))

(defn make-component
  [{:server/keys [port hot-reload]}])
